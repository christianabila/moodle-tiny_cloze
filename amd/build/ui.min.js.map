{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Plugin tiny_cloze for TinyMCE v6 in Moodle.\n *\n * @module      tiny_cloze/ui\n * @copyright   2023 MoodleDACH\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Modal from \"./modal\";\nimport Mustache from 'core/mustache';\nimport {get_string} from 'core/str';\nimport {getQuestionTypes} from './options';\nimport {component} from './common';\n\n// Helper functions.\n//const trim = v => v.toString().replace(/^\\s+/, '').replace(/\\s+$/, '');\nconst isNull = a => a === null || a === undefined;\nconst strdecode = t => String(t).replace(/\\\\(#|\\}|~)/g, '$1');\nconst strencode = t => String(t).replace(/(#|\\}|~)/g, '\\\\$1');\nconst indexOfNode = (list, node) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === node) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n// Marker class and the whole span element that is used to encapsulate the cloze question text.\nconst markerClass = 'cloze-question-marker';\nconst markerSpan = '<span contenteditable=\"false\" class=\"' + markerClass + '\" data-mce-contenteditable=\"false\">';\n// Regex to recognize the question string in the text e.g. {1:NUMERICAL:...} or {:MULTICHOICE:...}\nconst reQtype = /\\{([0-9]*):(MULTICHOICE(_H|_V|_S|_HS|_VS)?|MULTIRESPONSE(_H|_S|_HS)?|NUMERICAL|SHORTANSWER(_C)?|SA|NM):(.*?)\\}/g;\n\n// CSS classes that are used in the modal dialogue.\nconst CSS = {\n  ANSWER: 'tiny_cloze_answer',\n  ANSWERS: 'tiny_cloze_answers',\n  ADD: 'tiny_cloze_add',\n  CANCEL: 'tiny_cloze_cancel',\n  DELETE: 'tiny_cloze_delete',\n  FEEDBACK: 'tiny_cloze_feedback',\n  FRACTION: 'tiny_cloze_fraction',\n  LEFT: 'tiny_cloze_col0',\n  LOWER: 'tiny_cloze_down',\n  RIGHT: 'tiny_cloze_col1',\n  MARKS: 'tiny_cloze_marks',\n  DUPLICATE: 'tiny_cloze_duplicate',\n  RAISE: 'tiny_cloze_up',\n  SUBMIT: 'tiny_cloze_submit',\n  SUMMARY: 'tiny_cloze_summary',\n  TOLERANCE: 'tiny_cloze_tolerance',\n  TYPE: 'tiny_cloze_qtype'\n};\nconst TEMPLATE = {\n    FORM: '<div class=\"tiny_cloze\">' +\n      '<p class=\"ml-2\">{{qtype}}</p>' +\n      '<form name=\"tiny_cloze_form\">' +\n      '<div class=\"row ml-0\">' +\n      '<div class=\"form-group\">' +\n      '<label for=\"{{elementid}}_mark\">{{STR.defaultmark}}</label>' +\n      '<input id=\"{{elementid}}_mark\" type=\"text\" value=\"{{marks}}\" ' +\n      'class=\"{{CSS.MARKS}} form-control d-inline mx-1\" />' +\n      '<a class=\"{{CSS.ADD}}\" title=\"{{STR.addmoreanswerblanks}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/add', 'core') + '\"></a>' +\n      '</div>' +\n      '</div>' +\n      '<div class=\"{{CSS.ANSWERS}} mb-3\">' +\n      '<ol class=\"pl-3\">{{#answerdata}}' +\n      '<li class=\"mt-3\"><div class=\"row ml-0\">' +\n      '<div class=\"{{CSS.LEFT}} form-group\">' +\n      '<label for=\"{{id}}_answer\">{{STR.answer}}</label>' +\n      '<input id=\"{{id}}_answer\" type=\"text\" value=\"{{answer}}\" ' +\n      'class=\"{{CSS.ANSWER}} form-control d-inline mx-2\" />' +\n      '</div>' +\n      '<div class=\"{{CSS.LEFT}} form-group\">' +\n      '<a class=\"{{CSS.ADD}}\" title=\"{{STR.addmoreanswerblanks}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/add', 'core') + '\"></a>' +\n      '<a class=\"{{CSS.DELETE}}\" title=\"{{STR.delete}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/delete', 'core') + '\"></a>' +\n      '<a class=\"{{CSS.RAISE}}\" title=\"{{STR.up}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/up', 'core') + '\"></a>' +\n      '<a class=\"{{CSS.LOWER}}\" title=\"{{STR.down}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/down', 'core') + '\"></a>' +\n      '</div>' +\n      '</div>' +\n      '{{#numerical}}' +\n      '<div class=\"row\">' +\n      '<div class=\"{{CSS.RIGHT}} form-group\">' +\n      '<label for=\"{{id}}_tolerance\">{{{STR.tolerance}}}</label>' +\n      '<input id=\"{{id}}_tolerance\" type=\"text\" value=\"{{tolerance}}\" ' +\n      'class=\"{{CSS.TOLERANCE}} form-control d-inline mx-2\" />' +\n      '</div>' +\n      '</div>' +\n      '{{/numerical}}' +\n      '<div class=\"row\">' +\n      '<div class=\"{{CSS.RIGHT}} form-group\">' +\n      '<label for=\"{{id}}_feedback\">{{STR.feedback}}</label>' +\n      '<input id=\"{{id}}_feedback\" type=\"text\" value=\"{{feedback}}\" ' +\n      'class=\"{{CSS.FEEDBACK}} form-control d-inline mx-2\" />' +\n      '</div>' +\n      '<div class=\"{{CSS.RIGHT}} form-group\">' +\n      '<label id=\"{{id}}_grade\">{{STR.grade}}</label>' +\n      '<select id=\"{{id}}_grade\" class=\"{{CSS.FRACTION}} custom-select mx-2\">' +\n      '{{#fraction}}' +\n      '<option value=\"\">{{STR.incorrect}}</option>' +\n      '{{#fractions}}' +\n      '<option value=\"{{value}}\"{{#selected}} selected=\"selected\"{{/selected}}>{{value}}%</option>' +\n      '{{/fractions}}' +\n      '{{/fraction}}' +\n      '</select>' +\n      '</div>' +\n      '</div></li>' +\n      '{{/answerdata}}</ol></div>' +\n      '</form>' +\n      '</div>',\n    OUTPUT: '&#123;{{marks}}:{{qtype}}:{{#answerdata}}~{{#fraction}}%{{fraction}}%{{/fraction}}{{answer}}' +\n      '{{#tolerance}}:{{tolerance}}{{/tolerance}}' +\n      '{{#feedback}}#{{feedback}}{{/feedback}}{{/answerdata}}&#125;',\n    TYPE: '<div class=\"tiny_cloze mt-0 mx-2 mb-2\">' +\n      '<p>{{STR.chooseqtypetoadd}}</p>' +\n      '<form name=\"tiny_cloze_form\">' +\n      '<div class=\"{{CSS.TYPE}} form-check\">' +\n      '{{#types}}' +\n      '<div class=\"option\">' +\n      '<input name=\"qtype\" id=\"qtype_qtype_{{type}}\" value=\"{{type}}\" type=\"radio\" class=\"form-check-input\">' +\n      '<label for=\"qtype_qtype_{{type}}\">' +\n      '<span class=\"typename\">{{type}}</span>' +\n      '<span class=\"{{CSS.SUMMARY}}\"><h6>{{name}}</h6><p>{{summary}}</p>' +\n      '<ul>{{#options}}' +\n      '<li>{{option}}</li>' +\n      '{{/options}}</ul>' +\n      '</span>' +\n      '</label></div>' +\n      '{{/types}}</div>' +\n      '</form></div>',\n  };\n  const FRACTIONS = [\n    {value: 100},\n    {value: 50},\n    {value: 33.33333},\n    {value: 25},\n    {value: 20},\n    {value: 16.66667},\n    {value: 14.28571},\n    {value: 12.5},\n    {value: 11.11111},\n    {value: 10},\n    {value: 5},\n    {value: 0},\n    {value: -5},\n    {value: -10},\n    {value: -11.11111},\n    {value: -12.5},\n    {value: -14.28571},\n    {value: -16.66667},\n    {value: -20},\n    {value: -25},\n    {value: -33.333},\n    {value: -50},\n    {value: -100},\n  ];\n\n// Language strings used in the modal dialogue.\nlet STR = {};\nconst getStr = async() => {\n  const res = await Promise.all([\n    get_string('answer', 'question'),\n    get_string('chooseqtypetoadd', 'question'),\n    get_string('defaultmark', 'question'),\n    get_string('feedback', 'question'),\n    get_string('incorrect', 'question'),\n    get_string('addmoreanswerblanks', 'qtype_calculated'),\n    get_string('delete', 'core'),\n    get_string('up', 'core'),\n    get_string('down', 'core'),\n    get_string('tolerance', 'qtype_calculated'),\n    get_string('grade', 'grades'),\n  ]);\n  [\n    'answer',\n    'chooseqtypetoadd',\n    'defaultmark',\n    'feedback',\n    'incorrect',\n    'addmoreanswerblanks',\n    'delete',\n    'up',\n    'down',\n    'tolerance',\n    'grade',\n  ].map((l, i) => {\n    STR[l] = res[i];\n  });\n};\n\n/**\n * The editor instance that is injected via the onInit() function.\n *\n * @type tinymce.Editor\n */\nlet editor = null;\n\n  let isBlurred = false;\n  /**\n   * A reference to the currently open form.\n   *\n   * @param _form\n   * @type Node\n   * @private\n   */\n  let _form = null;\n\n  /**\n   * An array containing the current answers options\n   *\n   * @param _answerdata\n   * @type Array\n   * @private\n   */\n  let _answerdata = [];\n\n  let _answerDefault = '';\n  /**\n   * The sub question type to be edited\n   *\n   * @param _qtype\n   * @type String\n   * @private\n   */\n  let _qtype = null;\n\n  /**\n   * The text initial selected to use as answer default\n   *\n   * @param _selectedNode\n   * @type Node\n   * @private\n   */\n  let _selectedNode = null;\n\n  let _selectedOffset = -1;\n\n  /**\n   * The maximum marks for the sub question\n   *\n   * @param _marks\n   * @type Integer\n   * @private\n   */\n  let _marks = 1;\n\n/**\n * The modal dialogue to be displayed when designing the cloze question types.\n * @type {null}\n */\nlet modal = null;\n\n/**\n * Inject the editor instance and add markers to the cloze question texts.\n * @param {tinymce.Editor} ed\n */\nconst onInit = function(ed) {\n    editor = ed;\n    addMakers();\n    getStr();\n  };\n\n/**\n * Display form to edit subquestions.\n *\n * @method displayDialogue\n * @private\n */\nconst displayDialogue = async function() {\n  const currentSel = editor.selection.getSel();\n  // Create the modal dialogue. Depending on whether we have a selected node or not, the content is different.\n  modal = await ModalFactory.create({\n    type: Modal.TYPE,\n    title: get_string('button_clozeedit', component),\n    templateContext: {\n      elementid: editor.id\n    },\n    removeOnClose: true,\n    large: true,\n  });\n\n  // Resolve whether cursor is in a subquestion.\n  var subquestion = resolveSubquestion();\n  if (subquestion) {\n    _selectedNode = subquestion;\n    _selectedOffset = indexOfNode(editor.dom.select('.' + markerClass), subquestion);\n    _parseSubquestion(subquestion.innerHTML);\n    _setDialogueContent(_qtype);\n  } else {\n    _selectedNode = null;\n    _selectedOffset = currentSel.anchorOffset;\n    // That's the content with the list of question types to select one from.\n    _setDialogueContent();\n  }\n};\n\n/**\n * Search for cloze questions based on a regular expression. All the matching snippets at least contain the cloze\n * question definition. Although Moodle does not support encapsulated other functions within curly brackets, we\n * still try to find the correct closing bracket. The so extracted cloze question is surrounded by a marker span\n * element, that contains attributes so that the content inside the span cannot be modified by the editor (in the\n * textarea). Also, this makes it a lot easier to select the question, edit it in the dialogue and replace the result\n * in the existing text area.\n */\nconst addMakers = function() {\n\n  let content = editor.getContent();\n  let newContent = '';\n\n  // Check if there is already a marker span. In this case we do not have to do anything.\n  if (content.indexOf(markerClass) !== -1) {\n    return;\n  }\n\n  let m;\n  do {\n    m = content.match(reQtype);\n    if (!m) { // No match of a cloze question, then we are done.\n      newContent += content;\n      break;\n    }\n    // Copy the current match to the new string preceded with the <span>.\n    const pos = content.indexOf(m[0]);\n    newContent += content.substring(0, pos) + markerSpan + content.substring(pos, pos + m[0].length);\n    content = content.substring(pos + m[0].length);\n\n    // Count the { in the string, should be just one (the very first one at position 0).\n    let level = (m[0].match(/\\{/g) || []).length;\n    if (level === 1) {\n      // If that's the case, we close the span and the cloze question text is the innerHTML of that marker span.\n      newContent += '</span>';\n      continue; // Look for the next matching cloze question.\n    }\n    // If there are more { than } in the string, then we did not find the corresponding } that belongs to the cloze string.\n    while (level > 1) {\n      const a = content.indexOf('{');\n      const b = content.indexOf('}');\n      if (a > -1 && b > -1 && a < b) { // The { is before another } so remember to find as many } until we back at level 1.\n        level++;\n        newContent = content.substring(0, a);\n        content = content.substring(a + 1);\n      } else if (b > -1) {  // We found a closing } to a previously {.\n        newContent = content.substring(0, b);\n        content = content.substring(b + 1);\n        level--;\n      } else {\n        level = 1; // Should not happen, just to stop the endless loop.\n      }\n    }\n    newContent += '</span>';\n  } while (m);\n  editor.setContent(newContent);\n};\n\n/**\n * Look for the marker span elements around a cloze question and remove that span.\n */\nconst removeMarkers = function() {\n  for (const span of editor.dom.select('span.' + markerClass)) {\n    editor.dom.setOuterHTML(span, span.innerHTML);\n  }\n};\n\n/**\n *\n * @param {object} content\n * @param {string} event\n */\nconst onProcess = function(content, event) {\n  if (!isNull(content.save) && content.save === true) {\n    if (event === 'PostProcess') {\n      // When the blur event was triggered, the editor is still there, we need to reapply\n      // the previously removed styling. If this was a submit event, then do not reapply the\n      // styling to prevent that this is saved in the database.\n      if (isBlurred) {\n        addMakers();\n        isBlurred = false;\n      }\n    } else {\n      removeMarkers();\n    }\n  }\n};\n/**\n * Notice when the editor content is blurred, because the focus left the editor window.\n */\nconst onBlur = function() {\n  isBlurred = true;\n};\n\n\n  /**\n   * Return the dialogue content for the tool, attaching any required\n   * events.\n   *\n   * @method _setDialogueContent\n   * @param {String} qtype The question type to be used\n   * @return {Node} The content to place in the dialogue.\n   * @private\n   */\n  const _setDialogueContent = function(qtype) {\n\n    let contentText;\n    if (!qtype) {\n      contentText = Mustache.render(TEMPLATE.TYPE, {\n        CSS: CSS,\n        STR: STR,\n        qtype: _qtype,\n        types: getQuestionTypes(editor)\n      });\n    } else {\n      contentText = Mustache.render(TEMPLATE.FORM, {\n        CSS: CSS,\n        STR: STR,\n        answerdata: _answerdata,\n        elementid: crypto.randomUUID(),\n        qtype: _qtype,\n        marks: _marks,\n        numerical: (_qtype === 'NUMERICAL' || _qtype === 'NM')\n      });\n    }\n    modal.setBody(contentText);\n    modal.show();\n    const $root = modal.getRoot();\n    const root = $root[0];\n    _form = root.querySelector('form');\n    $root.off(ModalEvents.cancel, _cancel);\n    $root.off(ModalEvents.save, _choiceHandler);\n    $root.off(ModalEvents.save, _setSubquestion);\n    root.addEventListener(ModalEvents.cancel, _cancel);\n\n    if (!qtype) {\n      $root.on(ModalEvents.save, _choiceHandler);\n      return;\n    }\n    $root.on(ModalEvents.save, _setSubquestion);\n\n    const getTarget = e => {\n      let p = e.target;\n      while (!isNull(p) && p.nodeType === 1 && p.tagName !== 'A') {\n        p = p.parentNode;\n      }\n      if (isNull(p.classList)) {\n        return null;\n      }\n      return p;\n    };\n\n    _form.addEventListener('click', e => {\n      const p = getTarget(e);\n      if (isNull(p)) {\n        return;\n      }\n      if (p.classList.contains(CSS.DELETE)) {\n        e.preventDefault();\n        _deleteAnswer(p);\n        return;\n      }\n      if (p.classList.contains(CSS.ADD)) {\n        e.preventDefault();\n        _addAnswer(p);\n        return;\n      }\n      if (p.classList.contains(CSS.LOWER)) {\n        e.preventDefault();\n        _lowerAnswer(p);\n        return;\n      }\n      if (p.classList.contains(CSS.RAISE)) {\n        e.preventDefault();\n        _raiseAnswer(p);\n      }\n    });\n    _form.addEventListener('keyup', e => {\n      const p = getTarget(e);\n      if (isNull(p)) {\n        return;\n      }\n      if (p.classList.contains(CSS.ANSWER) || p.classList.contains(CSS.FEEDBACK)) {\n        e.preventDefault();\n        _addAnswer(p);\n      }\n    });\n  };\n\n  /**\n   * Find the correct answer default for the current question type\n   *\n   * @method _getAnswerDefault\n   * @private\n   * @return {String} Default answer\n   */\n  const _getAnswerDefault = function() {\n    switch (_qtype) {\n      case 'SHORTANSWER':\n      case 'SA':\n      case 'NUMERICAL':\n      case 'NM':\n        _answerDefault = 100;\n        break;\n      default:\n        _answerDefault = '';\n    }\n    return _answerDefault;\n  };\n\n  /**\n   * Handle question choice\n   *\n   * @method _choiceHandler\n   * @private\n   * @param {Event} e Event from button click in chooser\n   */\n  const _choiceHandler = function(e) {\n    e.preventDefault();\n    let qtype = _form.querySelector('input[name=qtype]:checked');\n    if (qtype) {\n      _qtype = qtype.value;\n      _getAnswerDefault();\n    }\n      _answerdata = [\n        {\n          id: crypto.randomUUID(),\n          answer: '',\n          feedback: '',\n          fraction: 100,\n          fractions: FRACTIONS.map((item) => ({\n            value: item.value,\n            selected: item.value === 100,\n          })),\n          tolerance: 0\n        }\n      ];\n    _setDialogueContent(_qtype);\n    _form.querySelector('.' + CSS.ANSWER).focus();\n  };\n\n  /**\n   * Parse question and set properties found\n   *\n   * @method _parseSubquestion\n   * @private\n   * @param {String} question The question string\n   */\n  const _parseSubquestion = function(question) {\n    const parts = reQtype.exec(question);\n    if (!parts) {\n      return;\n    }\n    _marks = parts[1];\n    _qtype = parts[2];\n    _getAnswerDefault();\n    _answerdata = [];\n    const answers = parts[6].match(/(\\\\.|[^~])*/g);\n    if (!answers) {\n      return;\n    }\n    answers.forEach(function(answer) {\n      const options = /^(%(-?[.0-9]+)%|(=?))((\\\\.|[^#])*)#?(.*)/.exec(answer);\n      if (options && options[4]) {\n        const frac = options[3] ? 100 : options[2] || 0;\n        if (_qtype === 'NUMERICAL' ||_qtype === 'NM') {\n          const tolerance = /^([^:]*):?(.*)/.exec(options[4])[2] || 0;\n          _answerdata.push({\n            id: crypto.randomUUID(),\n            answer: strdecode(options[4].replace(/:.*/, '')),\n            feedback: strdecode(options[6]),\n            tolerance: tolerance,\n            fraction: frac,\n            fractions: FRACTIONS.map((item) => ({\n              value: item.value,\n              selected: item.value.toString() === frac,\n            })),\n          });\n          return;\n        }\n        _answerdata.push({\n          answer: strdecode(options[4]),\n          id: crypto.randomUUID(),\n          feedback: strdecode(options[6]),\n          fraction: frac,\n          fractions: FRACTIONS.map((item) => ({\n            value: item.value,\n            selected: item.value.toString() === frac,\n          })),\n        });\n      }\n    });\n  };\n\n  /**\n   * Insert a new set of answer blanks before the button.\n   *\n   * @method _addAnswer\n   * @param {Node} a Node that is the referred element\n   * @private\n   */\n  const _addAnswer = function(a) {\n    let index = indexOfNode(_form.querySelectorAll('.' + CSS.ADD), a);\n    if (index === -1) {\n      index = indexOfNode(_form.querySelectorAll('.' + CSS.ANSWER + ', .' + CSS.FEEDBACK), a);\n      if (index !== -1) {\n        index = Math.floor(index / 2) + 1;\n      }\n    }\n    if (a.closest('li')) {\n      _answerDefault = a.closest('li').querySelector('.' + CSS.FRACTION).value;\n      index = indexOfNode(_form.querySelectorAll('li'), a.closest('li')) + 1;\n    }\n    let tolerance = 0;\n    if (a.closest('li') && a.closest('li').querySelector('.' + CSS.TOLERANCE)) {\n      tolerance = a.closest('li').querySelector('.' + CSS.TOLERANCE).value;\n    }\n    _getFormData();\n    _answerdata.splice(index, 0, {\n      id: crypto.randomUUID(),\n      answer: '',\n      feedback: '',\n      fraction: _answerDefault,\n      fractions: FRACTIONS.map((item) => ({\n        value: item.value,\n        selected: item.value.toString() === _answerDefault,\n      })),\n      tolerance: tolerance\n    });\n    _setDialogueContent(_qtype);\n    _form.querySelectorAll('.' + CSS.ANSWER).item(index).focus();\n  };\n\n  /**\n   * Delete set of answer blanks before the button.\n   *\n   * @method _deleteAnswer\n   * @param {Node} a Node that is the referred element\n   * @private\n   */\n  const _deleteAnswer = function(a) {\n    let index = indexOfNode(_form.querySelectorAll('.' + CSS.DELETE), a);\n    if (index === -1) {\n      index = indexOfNode(_form.querySelectorAll('li'), a.closest('li'));\n    }\n    _getFormData();\n    _answerdata.splice(index, 1);\n    _setDialogueContent(_qtype);\n    const answers = _form.querySelectorAll('.' + CSS.ANSWER);\n    index = Math.min(index, answers.length - 1);\n    answers.item(index).focus();\n  };\n\n  /**\n   * Lower answer option\n   *\n   * @method _lowerAnswer\n   * @param {Node} a Node that is the referred element\n   * @private\n   */\n  const _lowerAnswer = function(a) {\n    const li = a.closest('li');\n    li.before(li.nextSibling);\n    li.querySelector('.' + CSS.ANSWER).focus();\n  };\n\n  /**\n   * Raise answer option\n   *\n   * @method _raiseAnswer\n   * @param {Node} a Node that is the referred element\n   * @private\n   */\n  const _raiseAnswer = function(a) {\n    const li = a.closest('li');\n    li.after(li.previousSibling);\n    li.querySelector('.' + CSS.ANSWER).focus();\n  };\n\n  /**\n   * Reset and hide form.\n   *\n   * @method _cancel\n   * @param {Event} e Event from button click\n   * @private\n   */\n  const _cancel = function(e) {\n    e.preventDefault();\n    modal.hide();\n  };\n\n  /**\n   * Insert content into editor and reset and hide form.\n   *\n   * @method _setSubquestion\n   * @param {Event} e Event from button click\n   * @private\n   */\n  const _setSubquestion = function(e) {\n    e.preventDefault();\n    _getFormData();\n\n    _answerdata.forEach(function(option) {\n      option.answer = strencode(option.answer);\n      option.feedback = strencode(option.feedback);\n    });\n\n    const question = Mustache.render(TEMPLATE.OUTPUT, {\n      answerdata: _answerdata,\n      qtype: _qtype,\n      marks: _marks\n    });\n\n    const newQuestion = markerSpan + question + '</span>';\n\n    modal.hide();\n    editor.focus();\n    if (_selectedNode) {\n      editor.dom.select('.' + markerClass)[_selectedOffset].innerHTML = newQuestion;\n    } else {\n      const selectedNode = editor.selection.getSel().anchorNode;\n\n      const newText = selectedNode.textContent.substr(0, _selectedOffset)\n        + newQuestion + selectedNode.textContent.substr(_selectedOffset);\n      editor.insertContent(newText);\n    }\n  };\n\n  /**\n   * Read and process the current data in the form.\n   *\n   * @method _setSubquestion\n   * @chainable\n   * @return {Object} self\n   * @private\n   */\n  const _getFormData = function() {\n    _answerdata = [];\n    let answer;\n    const answers = _form.querySelectorAll('.' + CSS.ANSWER);\n    const feedbacks = _form.querySelectorAll('.' + CSS.FEEDBACK);\n    const fractions = _form.querySelectorAll('.' + CSS.FRACTION);\n    const tolerances = _form.querySelectorAll('.' + CSS.TOLERANCE);\n    for (let i = 0; i < answers.length; i++) {\n      answer = answers.item(i).value;\n      if (_qtype === 'NM' || _qtype === 'NUMERICAL') {\n        answer = Number(answer);\n      }\n      _answerdata.push({\n        answer: answer,\n        id: crypto.randomUUID(),\n        feedback: feedbacks.item(i).value,\n        fraction: fractions.item(i).value,\n        fractions: FRACTIONS.map((item) => ({\n          value: item.value,\n          selected: item.value.toString() === fractions.item(i).value,\n        })),\n        tolerance: !isNull(tolerances.item(i)) ? tolerances.item(i).value : 0\n      });\n      _marks = _form.querySelector('.' + CSS.MARKS).value;\n    }\n  };\n\n  /**\n   * Check whether cursor is in a subquestion and return subquestion text if\n   * true.\n   *\n   * @method resolveSubquestion\n   * @return {Mixed} The selected node of with the subquestion if found, false otherwise.\n   */\n  const resolveSubquestion = function() {\n    let span = false;\n    editor.dom.getParents(editor.selection.getStart(), elm => {\n      // Are we in a span that encapsulates the cloze question?\n      if (!isNull(elm.classList) && elm.classList.contains(markerClass)) {\n        span = elm;\n      }\n    });\n    return span;\n  };\n\nexport {\n  displayDialogue,\n  resolveSubquestion,\n  onInit,\n  onProcess,\n  onBlur\n};\n"],"names":["isNull","a","strdecode","t","String","replace","strencode","indexOfNode","list","node","i","length","markerClass","markerSpan","reQtype","CSS","ANSWER","ANSWERS","ADD","CANCEL","DELETE","FEEDBACK","FRACTION","LEFT","LOWER","RIGHT","MARKS","DUPLICATE","RAISE","SUBMIT","SUMMARY","TOLERANCE","TYPE","TEMPLATE","FORM","M","util","image_url","OUTPUT","FRACTIONS","value","STR","editor","isBlurred","_form","_answerdata","_answerDefault","_qtype","_selectedNode","_selectedOffset","_marks","modal","ed","addMakers","async","res","Promise","all","map","l","getStr","currentSel","selection","getSel","ModalFactory","create","type","Modal","title","component","templateContext","elementid","id","removeOnClose","large","subquestion","resolveSubquestion","dom","select","_parseSubquestion","innerHTML","_setDialogueContent","anchorOffset","m","content","getContent","newContent","indexOf","match","pos","substring","level","b","setContent","event","save","span","setOuterHTML","removeMarkers","qtype","contentText","Mustache","render","answerdata","crypto","randomUUID","marks","numerical","types","setBody","show","$root","getRoot","root","querySelector","off","ModalEvents","cancel","_cancel","_choiceHandler","_setSubquestion","addEventListener","on","getTarget","e","p","target","nodeType","tagName","parentNode","classList","contains","preventDefault","_deleteAnswer","_addAnswer","_lowerAnswer","_raiseAnswer","_getAnswerDefault","answer","feedback","fraction","fractions","item","selected","tolerance","focus","question","parts","exec","answers","forEach","options","frac","push","toString","index","querySelectorAll","Math","floor","closest","_getFormData","splice","min","li","before","nextSibling","after","previousSibling","hide","option","newQuestion","selectedNode","anchorNode","newText","textContent","substr","insertContent","feedbacks","tolerances","Number","getParents","getStart","elm"],"mappings":"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"}