{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["import ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Modal from \"./modal\";\nimport Pending from 'core/pending';\nimport Mustache from 'core/mustache';\n\nconst trim = v => v.toString().replace(/^\\s+/, '').replace(/\\s+$/, '');\nconst isNull = a => a === null || a === undefined;\n\nconst CSS = {\n  ANSWER: 'tiny_cloze_answer',\n  ANSWERS: 'tiny_cloze_answers',\n  ADD: 'tiny_cloze_add',\n  CANCEL: 'tiny_cloze_cancel',\n  DELETE: 'tiny_cloze_delete',\n  FEEDBACK: 'tiny_cloze_feedback',\n  FRACTION: 'tiny_cloze_fraction',\n  LEFT: 'tiny_cloze_col0',\n  LOWER: 'tiny_cloze_down',\n  RIGHT: 'tiny_cloze_col1',\n  MARKS: 'tiny_cloze_marks',\n  DUPLICATE: 'tiny_cloze_duplicate',\n  RAISE: 'tiny_cloze_up',\n  SUBMIT: 'tiny_cloze_submit',\n  SUMMARY: 'tiny_cloze_summary',\n  TOLERANCE: 'tiny_cloze_tolerance',\n  TYPE: 'tiny_cloze_qtype'\n};\nconst TEMPLATE = {\n    FORM: '<div class=\"tiny_cloze\">' +\n      '<p class=\"ml-2\">{{qtype}}</p>' +\n      '<form class=\"tiny_form\">' +\n      '<div class=\"row ml-0\">' +\n      '<div class=\"form-group\">' +\n      '<label for=\"{{elementid}}_mark\">{{get_string \"defaultmark\" \"question\"}}</label>' +\n      '<input id=\"{{elementid}}_mark\" type=\"text\" value=\"{{marks}}\" ' +\n      'class=\"{{CSS.MARKS}} form-control d-inline mx-1\" />' +\n      '<a class=\"{{CSS.ADD}}\" title=\"{{get_string \"addmoreanswerblanks\" \"qtype_calculated\"}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/add', 'core') + '\"></a>' +\n      '</div>' +\n      '</div>' +\n      '<div class=\"{{CSS.ANSWERS}} mb-3\">' +\n      '<ol class=\"pl-3\">{{#answerdata}}' +\n      '<li class=\"mt-3\"><div class=\"row ml-0\">' +\n      '<div class=\"{{../CSS.LEFT}} form-group\">' +\n      '<label for=\"{{id}}_answer\">{{get_string \"answer\" \"question\"}}</label>' +\n      '<input id=\"{{id}}_answer\" type=\"text\" value=\"{{answer}}\" ' +\n      'class=\"{{../CSS.ANSWER}} form-control d-inline mx-2\" />' +\n      '</div>' +\n      '<div class=\"{{../CSS.LEFT}} form-group\">' +\n      '<a class=\"{{../CSS.ADD}}\" title=\"{{get_string \"addmoreanswerblanks\" \"qtype_calculated\"}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/add', 'core') + '\"></a>' +\n      '<a class=\"{{../CSS.DELETE}}\" title=\"{{get_string \"delete\" \"core\"}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/delete', 'core') + '\"></a>' +\n      '<a class=\"{{../CSS.RAISE}}\" title=\"{{get_string \"up\" \"core\"}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/up', 'core') + '\"></a>' +\n      '<a class=\"{{../CSS.LOWER}}\" title=\"{{get_string \"down\" \"core\"}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/down', 'core') + '\"></a>' +\n      '</div>' +\n      '</div>' +\n      '{{#if ../numerical}}' +\n      '<div class=\"row\">' +\n      '<div class=\"{{../CSS.RIGHT}} form-group\">' +\n      '<label for=\"{{id}}_tolerance\">{{{get_string \"tolerance\" \"qtype_calculated\"}}}</label>' +\n      '<input id=\"{{id}}_tolerance\" type=\"text\" value=\"{{tolerance}}\" ' +\n      'class=\"{{../../CSS.TOLERANCE}} form-control d-inline mx-2\" />' +\n      '</div>' +\n      '</div>' +\n      '{{/if}}' +\n      '<div class=\"row\">' +\n      '<div class=\"{{../CSS.RIGHT}} form-group\">' +\n      '<label for=\"{{id}}_feedback\">{{get_string \"feedback\" \"question\"}}</label>' +\n      '<input id=\"{{id}}_feedback\" type=\"text\" value=\"{{feedback}}\" ' +\n      'class=\"{{../CSS.FEEDBACK}} form-control d-inline mx-2\" />' +\n      '</div>' +\n      '<div class=\"{{../CSS.RIGHT}} form-group\">' +\n      '<label id=\"{{id}}_grade\">{{get_string \"grade\" \"grades\"}}</label>' +\n      '<select id=\"{{id}}_grade\" value=\"{{fraction}}\" class=\"{{../CSS.FRACTION}} custom-select mx-2\" selected>' +\n      '{{#if fraction}}' +\n      '<option value=\"{{../fraction}}\">{{../fraction}}%</option>' +\n      '{{/if}}' +\n      '<option value=\"\">{{get_string \"incorrect\" \"question\"}}</option>' +\n      '{{#../fractions}}' +\n      '<option value=\"{{fraction}}\">{{fraction}}%</option>' +\n      '{{/../fractions}}' +\n      '</select>' +\n      '</div>' +\n      '</div></li>' +\n      '{{/answerdata}}</ol></div>' +\n      '<p class=\"mb-0\"><button type=\"submit\" class=\"{{CSS.SUBMIT}} btn btn-primary mr-1\" ' +\n      'title=\"{{get_string \"common:insert\" \"editor_tinymce\"}}\">' +\n      '{{get_string \"common:insert\" \"editor_tinymce\"}}</button>' +\n      '<button type=\"submit\" class=\"{{CSS.CANCEL}} btn btn-secondary\">{{get_string \"cancel\" \"core\"}}</button></p>' +\n      '</form>' +\n      '</div>',\n    OUTPUT: '&#123;{{marks}}:{{qtype}}:{{#answerdata}}~{{#if fraction}}%{{../fraction}}%{{/if}}{{answer}}' +\n      '{{#if tolerance}}:{{tolerance}}{{/if}}' +\n      '{{#if feedback}}#{{feedback}}{{/if}}{{/answerdata}}&#125;',\n    TYPE: '<div class=\"tiny_cloze mt-0 mx-2 mb-2\">' +\n      '<p>{{get_string \"chooseqtypetoadd\" \"question\"}}</p>' +\n      '<form =\"tiny_form\">' +\n      '<div class=\"{{CSS.TYPE}} form-check\">' +\n      '{{#types}}' +\n      '<div class=\"option\">' +\n      '<input name=\"qtype\" id=\"qtype_qtype_{{type}}\" value=\"{{type}}\" type=\"radio\" class=\"form-check-input\">' +\n      '<label for=\"qtype_qtype_{{type}}\">' +\n      '<span class=\"typename\">{{type}}</span>' +\n      '<span class=\"{{../CSS.SUMMARY}}\"><h6>{{name}}</h6><p>{{summary}}</p>' +\n      '<ul>{{#options}}' +\n      '<li>{{option}}</li>' +\n      '{{/options}}</ul>' +\n      '</span>' +\n      '</label></div>' +\n      '{{/types}}</div>' +\n      '<p class=\"mb-0\"><button type=\"submit\" class=\"{{CSS.SUBMIT}} btn btn-primary mr-1\" ' +\n      'title=\"{{get_string \"add\" \"core\"}}\">{{get_string \"add\" \"core\"}}</button>' +\n      '{{#qtype}}<button type=\"submit\" class=\"{{../CSS.DUPLICATE}} btn btn-secondary mr-1\">' +\n      '{{get_string \"duplicate\" \"core\"}}</button>{{/qtype}}' +\n      '<button type=\"submit\" class=\"{{CSS.CANCEL}} btn btn-secondary\">{{get_string \"cancel\" \"core\"}}</button></p>' +\n      '</form></div>'\n  };\n  const FRACTIONS = [{fraction: 100},\n    {fraction: 50},\n    {fraction: 33.33333},\n    {fraction: 25},\n    {fraction: 20},\n    {fraction: 16.66667},\n    {fraction: 14.28571},\n    {fraction: 12.5},\n    {fraction: 11.11111},\n    {fraction: 10},\n    {fraction: 5},\n    {fraction: 0},\n    {fraction: -5},\n    {fraction: -10},\n    {fraction: -11.11111},\n    {fraction: -12.5},\n    {fraction: -14.28571},\n    {fraction: -16.66667},\n    {fraction: -20},\n    {fraction: -25},\n    {fraction: -33.333},\n    {fraction: -50},\n    {fraction: -100},\n  ];\n\n  /**\n   * A reference to the currently open form.\n   *\n   * @param _form\n   * @type Node\n   * @private\n   */\n  let _form = null;\n\n  /**\n   * An array containing the current answers options\n   *\n   * @param _answerdata\n   * @type Array\n   * @private\n   */\n  let _answerdata = null;\n\n  let _answerDefault = '';\n  /**\n   * The sub question type to be edited\n   *\n   * @param _qtype\n   * @type String\n   * @private\n   */\n  let _qtype = null;\n\n  /**\n   * The text initial selected to use as answer default\n   *\n   * @param _selectedText\n   * @type String\n   * @private\n   */\n  let _selectedText = null;\n\n\n  /**\n   * The maximum marks for the sub question\n   *\n   * @param _marks\n   * @type Integer\n   * @private\n   */\n  let _marks = null;\n\n  let modal = null;\n\n  /**\n   * The selection object returned by the browser.\n   *\n   * @property _currentSelection\n   * @type Range\n   * @default null\n   * @private\n   */\n  let _currentSelection = null;\n\n  const onInit =  function() {\n    this._groupFocus = {};\n    // Check whether we are editing a question.\n    var form = this.get('host').editor.ancestor('body#page-question-type-multianswer form, ' +\n      'body#page-question-type-multianswerwiris form');\n    // Only add plugin if this is the first editor on a multianswer question form.\n    if (!form ||\n      !this.get('host').editor.compareTo(form.one('.editor_tiny_content')) ||\n      !form.test('[action=\"question.php\"]')) {\n      return;\n    }\n\n    this.addButton({\n      icon: 'icon',\n      iconComponent: 'qtype_multianswer',\n      callback: this._displayDialogue\n    });\n    _marks = 1;\n    _answerDefault = '';\n\n    // We need custom highlight logic for this button.\n    this.get('host').on('atto:selectionchanged', function() {\n      if (this._resolveSubquestion()) {\n        this.highlightButtons();\n      } else {\n        this.unHighlightButtons();\n      }\n    }, this);\n\n  };\n\n  /**\n   * Display form to edit subquestions.\n   *\n   * @method _displayDialogue\n   * @param {tinymce.Editor} editor\n   * @private\n   */\n  const _displayDialogue = async function(editor) {\n\n    // Store the current selection.\n    _currentSelection = editor.selection.getContent();\n    if (trim(_currentSelection) === '') {\n      return;\n    }\n\n    // Save selected string to set answer default answer.\n    _selectedText = _currentSelection.toString();\n\n    const modal = await ModalFactory.create({\n      type: Modal.TYPE,\n      templateContext: getTemplateContext(editor, data),\n      large: true,\n    });\n\n    // Resolve whether cursor is in a subquestion.\n    var subquestion = _resolveSubquestion();\n    if (subquestion) {\n      _parseSubquestion(subquestion);\n      modal.setBody(_getDialogueContent(null, _qtype));\n    } else {\n      modal.setBody(_getDialogueContent());\n    }\n    modal.show();\n  };\n\n  /**\n   * Return the dialogue content for the tool, attaching any required\n   * events.\n   *\n   * @method _getDialogueContent\n   * @param {Event} e The event causing content to change\n   * @param {String} qtype The question type to be used\n   * @return {Node} The content to place in the dialogue.\n   * @private\n   */\n  const _getDialogueContent = function(e, qtype) {\n    let content;\n\n    if (_form) {\n      _form.remove().destroy(true);\n    }\n\n    if (!qtype) {\n      content = mustache.render(TEMPLATE.TYPE, {CSS: CSS,\n        qtype: this._qtype,\n        types: this.get('questiontypes')\n      });\n      _form = content;\n\n      content.delegate('click', _choiceHandler,\n        '.' + CSS.SUBMIT + ', .' + CSS.DUPLICATE);\n      content.querySelector('.' + CSS.CANCEL).on('click', _cancel);\n      return content;\n    }\n\n    content = mustache.render(TEMPLATE.FORM, {CSS: CSS,\n      answerdata: _answerdata,\n      elementid: crypto.randomUUID(),\n      fractions: FRACTIONS,\n      qtype: _qtype,\n      marks: _marks,\n      numerical: (_qtype === 'NUMERICAL' || _qtype === 'NM')\n    });\n\n    _form = content;\n\n    content.querySelector('.' + CSS.SUBMIT).on('click', _setSubquestion);\n    content.querySelector('.' + CSS.CANCEL).on('click', _cancel);\n    content.delegate('click', _deleteAnswer, '.' + CSS.DELETE);\n    content.delegate('click', _addAnswer, '.' + CSS.ADD);\n    content.delegate('key', _addAnswer, 'enter', '.' + CSS.ANSWER + ', .' + CSS.FEEDBACK);\n    content.delegate('click', _lowerAnswer, '.' + CSS.LOWER);\n    content.delegate('click', _raiseAnswer, '.' + CSS.RAISE);\n\n    return content;\n  };\n\n  /**\n   * Find the correct answer default for the current question type\n   *\n   * @method _getAnswerDefault\n   * @private\n   * @return {String} Default answer\n   */\n  const _getAnswerDefault = function() {\n    switch (_qtype) {\n      case 'SHORTANSWER':\n      case 'SA':\n      case 'NUMERICAL':\n      case 'NM':\n        _answerDefault = 100;\n        break;\n      default:\n        _answerDefault = '';\n    }\n    return _answerDefault;\n  };\n\n  /**\n   * Handle question choice\n   *\n   * @method _choiceHandler\n   * @private\n   * @param {Event} e Event from button click in chooser\n   */\n  const _choiceHandler = function(e) {\n    e.preventDefault();\n    let qtype = _form.querySelector('input[name=qtype]:checked');\n    if (qtype) {\n      _qtype = qtype.get('value');\n      _getAnswerDefault();\n    }\n    if (e && e.currentTarget && e.currentTarget.hasClass(CSS.SUBMIT)) {\n      _answerdata = [\n        {\n          id: crypto.randomUUID(),\n          answer: _selectedText,\n          feedback: '',\n          fraction: 100,\n          tolerance: 0\n        }\n      ];\n    }\n    _dialogue.set('bodyContent', _getDialogueContent(e, _qtype));\n    _form.querySelector('.' + CSS.ANSWER).focus();\n  };\n\n  /**\n   * Parse question and set properties found\n   *\n   * @method _parseSubquestion\n   * @private\n   * @param {String} question The question string\n   */\n  const _parseSubquestion = function(question) {\n    const re = /\\{([0-9]*):([_A-Z]+):(.*?)\\}$/g;\n    const parts = re.exec(question);\n    if (!parts) {\n      return;\n    }\n    _marks = parts[1];\n    _qtype = parts[2];\n    _getAnswerDefault();\n    _answerdata = [];\n    const answers = parts[3].match(/(\\\\.|[^~])*/g);\n    if (!answers) {\n      return;\n    }\n    answers.forEach(function(answer) {\n      const options = /^(%(-?[.0-9]+)%|(=?))((\\\\.|[^#])*)#?(.*)/.exec(answer);\n      if (options && options[4]) {\n        if (_qtype === 'NUMERICAL' ||_qtype === 'NM') {\n          const tolerance = /^([^:]*):?(.*)/.exec(options[4])[2] || 0;\n          _answerdata.push({\n            answer: _decode(options[4].replace(/:.*/, '')),\n            id: crypto.randomUUID(),\n            feedback: _decode(options[6]),\n            tolerance: tolerance,\n            fraction: options[3] ? 100 : options[2] || 0\n          });\n          return;\n        }\n        _answerdata.push({answer: this._decode(options[4]),\n          id: Y.guid(),\n          feedback: this._decode(options[6]),\n          fraction: options[3] ? 100 : options[2] || 0\n        });\n      }\n    });\n  };\n\n  /**\n   * Insert a new set of answer blanks before the button.\n   *\n   * @method _addAnswer\n   * @param {Event} e Event from button click or return\n   * @private\n   */\n  const _addAnswer = function(e) {\n    e.preventDefault();\n    var index = this._form.all('.' + CSS.ADD).indexOf(e.target);\n    if (index === -1) {\n      index = this._form.all('.' + CSS.ANSWER + ', .' + CSS.FEEDBACK).indexOf(e.target);\n      if (index !== -1) {\n        index = Math.floor(index / 2) + 1;\n      }\n    }\n    if (e.target.ancestor('li')) {\n      this._answerDefault = e.target.ancestor('li').one('.' + CSS.FRACTION).getDOMNode().value;\n      index = this._form.all('li').indexOf(e.target.ancestor('li')) + 1;\n    }\n    var tolerance = 0;\n    if (e.target.ancestor('li') && e.target.ancestor('li').one('.' + CSS.TOLERANCE)) {\n      tolerance = e.target.ancestor('li').one('.' + CSS.TOLERANCE).getDOMNode().value;\n    }\n    _getFormData();\n    _answerdata.splice(index, 0, {\n      id: crypto.randomUUID(),\n      answer: '',\n      feedback: '',\n      fraction: _answerDefault,\n      tolerance: tolerance\n    });\n    modal.setBody(_getDialogueContent(e, _qtype));\n    _form.querySelectorAll('.' + CSS.ANSWER).item(index).focus();\n  };\n\n  /**\n   * Delete set of answer blanks before the button.\n   *\n   * @method _deleteAnswer\n   * @param {Event} e Event from button click\n   * @private\n   */\n  const _deleteAnswer = function(e) {\n    e.preventDefault();\n    let index = this._form.all('.' + CSS.DELETE).indexOf(e.target);\n    if (index === -1) {\n      index = this._form.all('li').indexOf(e.target.ancestor('li'));\n    }\n    _getFormData();\n    _answerdata.splice(index, 1);\n    modal.setBody(_getDialogueContent(e, _qtype));\n    const answers = _form.all('.' + CSS.ANSWER);\n    index = Math.min(index, answers.size() - 1);\n    answers.item(index).focus();\n  };\n\n  /**\n   * Lower answer option\n   *\n   * @method _lowerAnswer\n   * @param {Event} e Event from button click\n   * @private\n   */\n  const _lowerAnswer = function(e) {\n    e.preventDefault();\n    const li = e.target.ancestor('li');\n    li.insertBefore(li.next(), li);\n    li.querySelector('.' + CSS.ANSWER).focus();\n  };\n\n  /**\n   * Raise answer option\n   *\n   * @method _raiseAnswer\n   * @param {Event} e Event from button click\n   * @private\n   */\n  const _raiseAnswer = function(e) {\n    e.preventDefault();\n    const li = e.target.ancestor('li');\n    li.insertBefore(li, li.previous());\n    li.querySelector('.' + CSS.ANSWER).focus();\n  };\n\n  /**\n   * Reset and hide form.\n   *\n   * @method _cancel\n   * @param {Event} e Event from button click\n   * @private\n   */\n  const _cancel = function(e) {\n    e.preventDefault();\n    this._dialogue.hide();\n  };\n\n  /**\n   * Insert content into editor and reset and hide form.\n   *\n   * @method _setSubquestion\n   * @param {Event} e Event from button click\n   * @private\n   */\n  const _setSubquestion = function(e, editor) {\n    e.preventDefault();\n    _getFormData();\n\n    _answerdata.forEach(function(option) {\n      option.answer = _encode(option.answer);\n      option.feedback = _encode(option.feedback);\n    });\n\n    const question = mustache.render(TEMPLATE.OUTPUT,\n        {CSS: CSS,\n          answerdata: _answerdata,\n          qtype: _qtype,\n          marks: _marks\n        });\n\n    _dialogue.hide();\n    editor.focus();\n    editor.setSelection(_currentSelection);\n\n    // Save the selection before inserting the new question.\n    let selection = window.rangy.saveSelection();\n    editor.insertContent(question);\n    //host.insertContentAtFocusPoint(question);\n\n    // Select the inserted text.\n    window.rangy.restoreSelection(selection);\n  };\n\n  /**\n   * Read and process the current data in the form.\n   *\n   * @method _setSubquestion\n   * @chainable\n   * @return {Object} self\n   * @private\n   */\n  const _getFormData = function() {\n    _answerdata = [];\n    let answer;\n    const answers = _form.querySelectorAll('.' + CSS.ANSWER);\n    const feedbacks = _form.querySelectorAll('.' + CSS.FEEDBACK);\n    const fractions = _form.querySelectorAll('.' + CSS.FRACTION);\n    const tolerances = _form.querySelectorAll('.' + CSS.TOLERANCE);\n    for (let i = 0; i < answers.size(); i++) {\n      answer = answers.item(i).getDOMNode().value;\n      if (this._qtype === 'NM' || this._qtype === 'NUMERICAL') {\n        answer = Number(answer);\n      }\n      _answerdata.push({answer: answer,\n        id: crypto.randomUUID(),\n        feedback: feedbacks.item(i).getDOMNode().value,\n        fraction: fractions.item(i).getDOMNode().value,\n        tolerance: tolerances.item(i) ? tolerances.item(i).getDOMNode().value : 0}\n      );\n      _marks = _form.querySelector('.' + CSS.MARKS).getDOMNode().value;\n    }\n  };\n\n  /**\n   * Locate a node and offset to be used as a end of a range representing an\n   * offset in the text value of a node.\n   * true.\n   *\n   * @method _getAnchor\n   * @param {DOMNode} node Parent node with text value\n   * @param {Integer} offset Position of character with in text of parent node\n   * @return {Object} An object with anchor and offset for the character\n   * with offset in string.\n   * @private\n   */\n  const _getAnchor = function(node, offset) {\n    if (!node.hasChildNodes()) {\n      return {anchor: node, offset: offset};\n    }\n    let child = node.firstChild;\n    while (offset > child.textContent.length) {\n      offset -= child.textContent.length;\n      child = child.nextSibling;\n    }\n    return _getAnchor(child, offset);\n  };\n\n  /**\n   * Find the offset for the text of a child with within the text of parent\n   *\n   * @method _getOffset\n   * @param {DOMNode} container Parent node with text value\n   * @param {DOMNode} node The node at returned offset\n   * @return {Integer} The offset of the child's text\n   * @private\n   */\n  const _getOffset = function(container, node) {\n    if (container === node) {\n      return 0;\n    }\n    if (!container.contains(node)) {\n      return 0;\n    }\n    let offset = 0;\n    let child = container.firstChild;\n    while (!child.contains(node)) {\n      offset += child.textContent.length;\n      child = child.nextSibling;\n    }\n    return offset + _getOffset(child, node);\n  };\n\n  /**\n   * Encode answer or feedback text.\n   *\n   * @method _encode\n   * @param {String} text Text to encode\n   * @return {String} The encoded text\n   * @private\n   */\n  const _encode = function(text) {\n    return String(text).replace(/(#|\\}|~)/g, '\\\\$1');\n  };\n\n  /**\n   * Decode answer or feedback text.\n   *\n   * @method _decode\n   * @param {String} text Text to decoded\n   * @return {String} The decoded text\n   * @private\n   */\n  const _decode = function(text) {\n    return String(text).replace(/\\\\(#|\\}|~)/g, '$1');\n  };\n\n  /**\n   * Check whether cursor is in a subquestion and return subquestion text if\n   * true.\n   *\n   * @method _resolveSubquestion\n   * @return {Mixed} The substring describing subquestion if found\n   * @private\n   */\n  const _resolveSubquestion = function(editor) {\n\n    let node = editor.selection.getStart();\n\n    if (!node) {\n      return false;\n    }\n\n    const selectedNode = node.parent();\n    const re = /\\{[0-9]*:(\\\\.|[^}])*?\\}/g;\n\n    if (!selectedNode) {\n      return false;\n    }\n\n    const subquestions = selectedNode.textContent.match(re);\n    if (!subquestions) {\n      return false;\n    }\n\n    let index = null;\n    const selection = editor.selection.getContent();\n    let result = '';\n    let questionEnd = 0;\n\n    if (!selection || selection.length === 0) {\n      return false;\n    }\n\n    var startIndex = this._getIndex(selectedNode, selection[0].startContainer, selection[0].startOffset),\n      endIndex = this._getIndex(selectedNode, selection[0].endContainer, selection[0].endOffset);\n\n    subquestions.forEach(function(subquestion) {\n      index = selectedNode.textContent.indexOf(subquestion, questionEnd);\n      questionEnd = index + subquestion.length;\n      if (index <= startIndex && endIndex <= questionEnd) {\n        result = subquestion;\n        const startRange = this._getAnchor(selectedNode, index);\n        const endRange = this._getAnchor(selectedNode, questionEnd);\n        selection[0].setStart(startRange.anchor, startRange.offset);\n        selection[0].setEnd(endRange.anchor, endRange.offset);\n        _currentSelection = selection;\n      }\n    }, this);\n\n    return result;\n  };\n\n  /**\n   * Calculate the postition in text of parent node an selection end point\n   *\n   * @method _getIndex\n   * @param {Node} selectedNode parent node\n   * @param {Node} container selection end point container node\n   * @param {Integer} offset selection end point offset\n   * @return {String} The substring describing subquestion\n   * @private\n   */\n  const _getIndex = function(selectedNode, container, offset) {\n    let index;\n    if (!container.firstChild) {\n      index = _getOffset(selectedNode, container) + offset;\n    } else if (container.childNodes[offset]) {\n      index = _getOffset(selectedNode, container.childNodes[offset]);\n    } else {\n      index = _getOffset(selectedNode, container.lastChild) + container.lastChild.textContent.length;\n    }\n    return index;\n  };\n\n"],"names":["M","util","image_url"],"mappings":"qeAuCMA,EAAEC,KAAKC,UAAU,QAAS,QAc1BF,EAAEC,KAAKC,UAAU,QAAS,QAG1BF,EAAEC,KAAKC,UAAU,WAAY,QAG7BF,EAAEC,KAAKC,UAAU,OAAQ,QAGzBF,EAAEC,KAAKC,UAAU,SAAU"}