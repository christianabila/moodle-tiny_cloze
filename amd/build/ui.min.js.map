{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Plugin tiny_cloze for TinyMCE v6 in Moodle.\n *\n * @module      tiny_cloze/ui\n * @copyright   2023 MoodleDACH\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport Modal from \"./modal\";\nimport Mustache from 'core/mustache';\nimport {get_string} from 'core/str';\nimport {getQuestionTypes} from './options';\nimport {component} from './common';\n\nconst trim = v => v.toString().replace(/^\\s+/, '').replace(/\\s+$/, '');\nconst isNull = a => a === null || a === undefined;\nconst strdecode = t => String(t).replace(/\\\\(#|\\}|~)/g, '$1');\nconst strencode = t => String(t).replace(/(#|\\}|~)/g, '\\\\$1');\n\nconst markerClass = 'cloze-question-marker';\nconst markerSpan = '<span contenteditable=\"false\" class=\"' + markerClass + '\" data-mce-contenteditable=\"false\">';\n// Regex to recognize the question string in the text e.g. {1:NUMERICAL:...} or {:MULTICHOICE:...}\nconst reQtype = /\\{([0-9]*):(MULTICHOICE(_H|_V|_S|_HS|_VS)?|MULTIRESPONSE(_H|_S|_HS)?|NUMERICAL|SHORTANSWER(_C)?|SA|NM):(.*?)\\}/g;\nconst CSS = {\n  ANSWER: 'tiny_cloze_answer',\n  ANSWERS: 'tiny_cloze_answers',\n  ADD: 'tiny_cloze_add',\n  CANCEL: 'tiny_cloze_cancel',\n  DELETE: 'tiny_cloze_delete',\n  FEEDBACK: 'tiny_cloze_feedback',\n  FRACTION: 'tiny_cloze_fraction',\n  LEFT: 'tiny_cloze_col0',\n  LOWER: 'tiny_cloze_down',\n  RIGHT: 'tiny_cloze_col1',\n  MARKS: 'tiny_cloze_marks',\n  DUPLICATE: 'tiny_cloze_duplicate',\n  RAISE: 'tiny_cloze_up',\n  SUBMIT: 'tiny_cloze_submit',\n  SUMMARY: 'tiny_cloze_summary',\n  TOLERANCE: 'tiny_cloze_tolerance',\n  TYPE: 'tiny_cloze_qtype'\n};\nconst TEMPLATE = {\n    FORM: '<div class=\"tiny_cloze\">' +\n      '<p class=\"ml-2\">{{qtype}}</p>' +\n      '<form class=\"tiny_form\">' +\n      '<div class=\"row ml-0\">' +\n      '<div class=\"form-group\">' +\n      '<label for=\"{{elementid}}_mark\">{{get_string \"defaultmark\" \"question\"}}</label>' +\n      '<input id=\"{{elementid}}_mark\" type=\"text\" value=\"{{marks}}\" ' +\n      'class=\"{{CSS.MARKS}} form-control d-inline mx-1\" />' +\n      '<a class=\"{{CSS.ADD}}\" title=\"{{get_string \"addmoreanswerblanks\" \"qtype_calculated\"}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/add', 'core') + '\"></a>' +\n      '</div>' +\n      '</div>' +\n      '<div class=\"{{CSS.ANSWERS}} mb-3\">' +\n      '<ol class=\"pl-3\">{{#answerdata}}' +\n      '<li class=\"mt-3\"><div class=\"row ml-0\">' +\n      '<div class=\"{{../CSS.LEFT}} form-group\">' +\n      '<label for=\"{{id}}_answer\">{{get_string \"answer\" \"question\"}}</label>' +\n      '<input id=\"{{id}}_answer\" type=\"text\" value=\"{{answer}}\" ' +\n      'class=\"{{../CSS.ANSWER}} form-control d-inline mx-2\" />' +\n      '</div>' +\n      '<div class=\"{{../CSS.LEFT}} form-group\">' +\n      '<a class=\"{{../CSS.ADD}}\" title=\"{{get_string \"addmoreanswerblanks\" \"qtype_calculated\"}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/add', 'core') + '\"></a>' +\n      '<a class=\"{{../CSS.DELETE}}\" title=\"{{get_string \"delete\" \"core\"}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/delete', 'core') + '\"></a>' +\n      '<a class=\"{{../CSS.RAISE}}\" title=\"{{get_string \"up\" \"core\"}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/up', 'core') + '\"></a>' +\n      '<a class=\"{{../CSS.LOWER}}\" title=\"{{get_string \"down\" \"core\"}}\">' +\n      '<img class=\"icon_smallicon\" src=\"' +\n      M.util.image_url('t/down', 'core') + '\"></a>' +\n      '</div>' +\n      '</div>' +\n      '{{#if ../numerical}}' +\n      '<div class=\"row\">' +\n      '<div class=\"{{../CSS.RIGHT}} form-group\">' +\n      '<label for=\"{{id}}_tolerance\">{{{get_string \"tolerance\" \"qtype_calculated\"}}}</label>' +\n      '<input id=\"{{id}}_tolerance\" type=\"text\" value=\"{{tolerance}}\" ' +\n      'class=\"{{../../CSS.TOLERANCE}} form-control d-inline mx-2\" />' +\n      '</div>' +\n      '</div>' +\n      '{{/if}}' +\n      '<div class=\"row\">' +\n      '<div class=\"{{../CSS.RIGHT}} form-group\">' +\n      '<label for=\"{{id}}_feedback\">{{get_string \"feedback\" \"question\"}}</label>' +\n      '<input id=\"{{id}}_feedback\" type=\"text\" value=\"{{feedback}}\" ' +\n      'class=\"{{../CSS.FEEDBACK}} form-control d-inline mx-2\" />' +\n      '</div>' +\n      '<div class=\"{{../CSS.RIGHT}} form-group\">' +\n      '<label id=\"{{id}}_grade\">{{get_string \"grade\" \"grades\"}}</label>' +\n      '<select id=\"{{id}}_grade\" value=\"{{fraction}}\" class=\"{{../CSS.FRACTION}} custom-select mx-2\" selected>' +\n      '{{#if fraction}}' +\n      '<option value=\"{{../fraction}}\">{{../fraction}}%</option>' +\n      '{{/if}}' +\n      '<option value=\"\">{{get_string \"incorrect\" \"question\"}}</option>' +\n      '{{#../fractions}}' +\n      '<option value=\"{{fraction}}\">{{fraction}}%</option>' +\n      '{{/../fractions}}' +\n      '</select>' +\n      '</div>' +\n      '</div></li>' +\n      '{{/answerdata}}</ol></div>' +\n      '<p class=\"mb-0\"><button type=\"submit\" class=\"{{CSS.SUBMIT}} btn btn-primary mr-1\" ' +\n      'title=\"{{get_string \"common:insert\" \"editor_tinymce\"}}\">' +\n      '{{get_string \"common:insert\" \"editor_tinymce\"}}</button>' +\n      '<button type=\"submit\" class=\"{{CSS.CANCEL}} btn btn-secondary\">{{get_string \"cancel\" \"core\"}}</button></p>' +\n      '</form>' +\n      '</div>',\n    OUTPUT: '&#123;{{marks}}:{{qtype}}:{{#answerdata}}~{{#if fraction}}%{{../fraction}}%{{/if}}{{answer}}' +\n      '{{#if tolerance}}:{{tolerance}}{{/if}}' +\n      '{{#if feedback}}#{{feedback}}{{/if}}{{/answerdata}}&#125;',\n    TYPE: '<div class=\"tiny_cloze mt-0 mx-2 mb-2\">' +\n      '<p>{{get_string \"chooseqtypetoadd\" \"question\"}}</p>' +\n      '<form =\"tiny_form\">' +\n      '<div class=\"{{CSS.TYPE}} form-check\">' +\n      '{{#types}}' +\n      '<div class=\"option\">' +\n      '<input name=\"qtype\" id=\"qtype_qtype_{{type}}\" value=\"{{type}}\" type=\"radio\" class=\"form-check-input\">' +\n      '<label for=\"qtype_qtype_{{type}}\">' +\n      '<span class=\"typename\">{{type}}</span>' +\n      '<span class=\"{{../CSS.SUMMARY}}\"><h6>{{name}}</h6><p>{{summary}}</p>' +\n      '<ul>{{#options}}' +\n      '<li>{{option}}</li>' +\n      '{{/options}}</ul>' +\n      '</span>' +\n      '</label></div>' +\n      '{{/types}}</div>' +\n      '<p class=\"mb-0\"><button type=\"submit\" class=\"{{CSS.SUBMIT}} btn btn-primary mr-1\" ' +\n      'title=\"{{get_string \"add\" \"core\"}}\">{{get_string \"add\" \"core\"}}</button>' +\n      '{{#qtype}}<button type=\"submit\" class=\"{{../CSS.DUPLICATE}} btn btn-secondary mr-1\">' +\n      '{{get_string \"duplicate\" \"core\"}}</button>{{/qtype}}' +\n      '<button type=\"submit\" class=\"{{CSS.CANCEL}} btn btn-secondary\">{{get_string \"cancel\" \"core\"}}</button></p>' +\n      '</form></div>',\n  };\n  const FRACTIONS = [{fraction: 100},\n    {fraction: 50},\n    {fraction: 33.33333},\n    {fraction: 25},\n    {fraction: 20},\n    {fraction: 16.66667},\n    {fraction: 14.28571},\n    {fraction: 12.5},\n    {fraction: 11.11111},\n    {fraction: 10},\n    {fraction: 5},\n    {fraction: 0},\n    {fraction: -5},\n    {fraction: -10},\n    {fraction: -11.11111},\n    {fraction: -12.5},\n    {fraction: -14.28571},\n    {fraction: -16.66667},\n    {fraction: -20},\n    {fraction: -25},\n    {fraction: -33.333},\n    {fraction: -50},\n    {fraction: -100},\n  ];\n\n  let editor = null;\n\n  let isBlurred = false;\n  /**\n   * A reference to the currently open form.\n   *\n   * @param _form\n   * @type Node\n   * @private\n   */\n  let _form = null;\n\n  /**\n   * An array containing the current answers options\n   *\n   * @param _answerdata\n   * @type Array\n   * @private\n   */\n  let _answerdata = [];\n\n  let _answerDefault = '';\n  /**\n   * The sub question type to be edited\n   *\n   * @param _qtype\n   * @type String\n   * @private\n   */\n  let _qtype = null;\n\n  /**\n   * The text initial selected to use as answer default\n   *\n   * @param _selectedText\n   * @type String\n   * @private\n   */\n  let _selectedText = null;\n\n\n  /**\n   * The maximum marks for the sub question\n   *\n   * @param _marks\n   * @type Integer\n   * @private\n   */\n  let _marks = 1;\n\n/**\n * The modal dialogue to be displayed when designing the cloze question types.\n * @type {null}\n */\nlet modal = null;\n\n  /**\n   * The selection object returned by the browser.\n   *\n   * @type Range|null\n   * @default null\n   */\n  let _currentSelection = null;\n\n  const onInit = function(ed) {\n    editor = ed;\n    addMakers();\n  };\n\n/**\n * Display form to edit subquestions.\n *\n * @method displayDialogue\n * @private\n */\nconst displayDialogue = async function() {\n  // Store the current selection.\n  _currentSelection = editor.selection.getContent();\n  if (trim(_currentSelection) !== '') {\n    // Save selected string to set answer default answer.\n    _selectedText = _currentSelection.toString();\n  }\n  modal = await ModalFactory.create({\n    type: Modal.TYPE,\n    title: get_string('button_clozeedit', component),\n    templateContext: {\n      elementid: editor.id\n    },\n    removeOnClose: true,\n    large: true,\n  });\n\n  // Resolve whether cursor is in a subquestion.\n  var subquestion = resolveSubquestion(editor);\n  if (subquestion) {\n    _parseSubquestion(subquestion);\n    modal.setBody(_getDialogueContent(null, _qtype));\n  } else {\n    const text = _getDialogueContent();\n    modal.setBody(text);\n  }\n  modal.show();\n};\n\nconst addMakers = function() {\n\n  let content = editor.getContent();\n  let newContent = '';\n\n  // Do not use a variable whether text is already highlighted, do a check for the existing class\n  // because this is safe for many tiny element windows at one page.\n  if (content.indexOf(markerClass) !== -1) {\n    return;\n  }\n\n  let m;\n  do {\n    m = content.match(reQtype);\n    if (!m) {\n      newContent += content;\n      break;\n    }\n    // Copy the current match to the new string preceeded with the <span>\n    const pos = content.indexOf(m[0]);\n    newContent += content.substring(0, pos) + markerSpan + content.substring(pos, pos + m[0].length);\n    content = content.substring(pos + m[0].length + 1);\n\n    // Count the { in the string, should be just one.\n    let level = (m[0].match(/\\{/g) || []).length;\n    if (level === 1) {\n      newContent += '</span>';\n      continue;\n    }\n    // If there are more { than } in the string, then we did not find the corresponding } that belongs to the cloze string.\n    while (level > 1) {\n      const a = content.indexOf('{');\n      const b = content.indexOf('}');\n      if (a > -1 && b > -1 && a < b) {\n        level++;\n        newContent = content.substring(0, a);\n        content = content.substring(a + 1);\n      } else if (b > -1) {\n        newContent = content.substring(0, b);\n        content = content.substring(b + 1);\n        level--;\n      } else {\n        level = 1; // Should not happen, just to stop the endless loop.\n      }\n    }\n    newContent += '</span>';\n  } while (m);\n  editor.setContent(newContent);\n};\n\nconst removeMarkers = function() {\n  for (const span of editor.dom.select('span.' + markerClass)) {\n    editor.dom.setOuterHTML(span, span.innerHTML);\n  }\n};\n\nconst onProcess = function(content, event) {\n  if (!isNull(content.save) && content.save === true) {\n    if (event === 'PostProcess') {\n      // When the blur event was triggered, the editor is still there, we need to reapply\n      // the previously removed styling. If this was a submit event, then do not reapply the\n      // styling to prevent that this is saved in the database.\n      if (isBlurred) {\n        addMakers();\n        isBlurred = false;\n      }\n    } else {\n      removeMarkers();\n    }\n  }\n};\n/**\n * Notice that when the editor content is blurred, because the focus left the editor window.\n */\nconst onBlur = function() {\n  isBlurred = true;\n};\n\n\n  /**\n   * Return the dialogue content for the tool, attaching any required\n   * events.\n   *\n   * @method _getDialogueContent\n   * @param {Event} e The event causing content to change\n   * @param {String} qtype The question type to be used\n   * @return {Node} The content to place in the dialogue.\n   * @private\n   */\n  const _getDialogueContent = function(e, qtype) {\n\n    if (_form) {\n      //_form.remove().destroy(true);\n    }\n\n    if (!qtype) {\n      const contentText = Mustache.render(TEMPLATE.TYPE, {CSS: CSS,\n        qtype: _qtype,\n        types: getQuestionTypes(editor)\n      });\n      const dom = new DOMParser();\n      const content = dom.parseFromString(contentText, 'text/html').body.firstElementChild;\n      _form = content;\n\n      content.addEventListener('click', _choiceHandler,\n        '.' + CSS.SUBMIT + ', .' + CSS.DUPLICATE);\n      content.querySelector('.' + CSS.CANCEL).addEventListener('click', _cancel);\n      return content.outerHTML;\n    }\n\n    const contentText = Mustache.render(TEMPLATE.FORM, {CSS: CSS,\n      answerdata: _answerdata,\n      elementid: crypto.randomUUID(),\n      fractions: FRACTIONS,\n      qtype: _qtype,\n      marks: _marks,\n      numerical: (_qtype === 'NUMERICAL' || _qtype === 'NM')\n    });\n\n    const dom = new DOMParser();\n    const content = dom.parseFromString(contentText, 'text/html').body.firstElementChild;\n    _form = content;\n\n    content.querySelector('.' + CSS.SUBMIT).addEventListener('click', _setSubquestion);\n    content.querySelector('.' + CSS.CANCEL).addEventListener('click', _cancel);\n    content.addEventListener('click', e => {\n      if (e.target.classList.contains(CSS.DELETE)) {\n        _deleteAnswer(e);\n        return;\n      }\n      if (e.target.classList.contains(CSS.ADD)) {\n        _addAnswer(e);\n        return;\n      }\n      if (e.target.classList.contains(CSS.LOWER)) {\n        _lowerAnswer(e);\n        return;\n      }\n      if (e.target.classList.contains(CSS.RAISE)) {\n        _raiseAnswer(e);\n        return;\n      }\n    });\n    content.addEventListener('keyup', e => {\n      if (e.target.classList.contains(CSS.ANSWER) || e.target.classList.contains(CSS.FEEDBACK)) {\n        _addAnswer(e);\n      }\n    });\n    return content.outerHTML;\n  };\n\n  /**\n   * Find the correct answer default for the current question type\n   *\n   * @method _getAnswerDefault\n   * @private\n   * @return {String} Default answer\n   */\n  const _getAnswerDefault = function() {\n    switch (_qtype) {\n      case 'SHORTANSWER':\n      case 'SA':\n      case 'NUMERICAL':\n      case 'NM':\n        _answerDefault = 100;\n        break;\n      default:\n        _answerDefault = '';\n    }\n    return _answerDefault;\n  };\n\n  /**\n   * Handle question choice\n   *\n   * @method _choiceHandler\n   * @private\n   * @param {Event} e Event from button click in chooser\n   */\n  const _choiceHandler = function(e) {\n    e.preventDefault();\n    let qtype = _form.querySelector('input[name=qtype]:checked');\n    if (qtype) {\n      _qtype = qtype.get('value');\n      _getAnswerDefault();\n    }\n    if (e && e.currentTarget && e.currentTarget.hasClass(CSS.SUBMIT)) {\n      _answerdata = [\n        {\n          id: crypto.randomUUID(),\n          answer: _selectedText,\n          feedback: '',\n          fraction: 100,\n          tolerance: 0\n        }\n      ];\n    }\n    modal.setBody(_getDialogueContent(e, _qtype));\n    _form.querySelector('.' + CSS.ANSWER).focus();\n  };\n\n  /**\n   * Parse question and set properties found\n   *\n   * @method _parseSubquestion\n   * @private\n   * @param {String} question The question string\n   */\n  const _parseSubquestion = function(question) {\n    const parts = reQtype.exec(question);\n    if (!parts) {\n      return;\n    }\n    _marks = parts[1];\n    _qtype = parts[2];\n    _getAnswerDefault();\n    _answerdata = [];\n    const answers = parts[3].match(/(\\\\.|[^~])*/g);\n    if (!answers) {\n      return;\n    }\n    answers.forEach(function(answer) {\n      const options = /^(%(-?[.0-9]+)%|(=?))((\\\\.|[^#])*)#?(.*)/.exec(answer);\n      if (options && options[4]) {\n        if (_qtype === 'NUMERICAL' ||_qtype === 'NM') {\n          const tolerance = /^([^:]*):?(.*)/.exec(options[4])[2] || 0;\n          _answerdata.push({\n            id: crypto.randomUUID(),\n            answer: strdecode(options[4].replace(/:.*/, '')),\n            feedback: strdecode(options[6]),\n            tolerance: tolerance,\n            fraction: options[3] ? 100 : options[2] || 0\n          });\n          return;\n        }\n        _answerdata.push({\n          answer: strdecode(options[4]),\n          id: crypto.randomUUID(),\n          feedback: strdecode(options[6]),\n          fraction: options[3] ? 100 : options[2] || 0\n        });\n      }\n    });\n  };\n\n  /**\n   * Insert a new set of answer blanks before the button.\n   *\n   * @method _addAnswer\n   * @param {Event} e Event from button click or return\n   * @private\n   */\n  const _addAnswer = function(e) {\n    e.preventDefault();\n    let index = _form.querySelectorAll('.' + CSS.ADD).indexOf(e.target);\n    if (index === -1) {\n      index = _form.querySelectorAll('.' + CSS.ANSWER + ', .' + CSS.FEEDBACK).indexOf(e.target);\n      if (index !== -1) {\n        index = Math.floor(index / 2) + 1;\n      }\n    }\n    if (e.target.closest('li')) {\n      _answerDefault = e.target.closest('li').querySelector('.' + CSS.FRACTION).getDOMNode().value;\n      index = _form.querySelectorAll('li').indexOf(e.target.closest('li')) + 1;\n    }\n    let tolerance = 0;\n    if (e.target.closest('li') && e.target.closest('li').querySelector('.' + CSS.TOLERANCE)) {\n      tolerance = e.target.closest('li').querySelector('.' + CSS.TOLERANCE).getDOMNode().value;\n    }\n    _getFormData();\n    _answerdata.splice(index, 0, {\n      id: crypto.randomUUID(),\n      answer: '',\n      feedback: '',\n      fraction: _answerDefault,\n      tolerance: tolerance\n    });\n    modal.setBody(_getDialogueContent(e, _qtype));\n    _form.querySelectorAll('.' + CSS.ANSWER).item(index).focus();\n  };\n\n  /**\n   * Delete set of answer blanks before the button.\n   *\n   * @method _deleteAnswer\n   * @param {Event} e Event from button click\n   * @private\n   */\n  const _deleteAnswer = function(e) {\n    e.preventDefault();\n    let index = _form.querySelectorAll('.' + CSS.DELETE).indexOf(e.target);\n    if (index === -1) {\n      index = _form.querySelectorAll('li').indexOf(e.target.closest('li'));\n    }\n    _getFormData();\n    _answerdata.splice(index, 1);\n    modal.setBody(_getDialogueContent(e, _qtype));\n    const answers = _form.querySelectorAll('.' + CSS.ANSWER);\n    index = Math.min(index, answers.size() - 1);\n    answers.item(index).focus();\n  };\n\n  /**\n   * Lower answer option\n   *\n   * @method _lowerAnswer\n   * @param {Event} e Event from button click\n   * @private\n   */\n  const _lowerAnswer = function(e) {\n    e.preventDefault();\n    const li = e.target.closest('li');\n    li.insertBefore(li.next(), li);\n    li.querySelector('.' + CSS.ANSWER).focus();\n  };\n\n  /**\n   * Raise answer option\n   *\n   * @method _raiseAnswer\n   * @param {Event} e Event from button click\n   * @private\n   */\n  const _raiseAnswer = function(e) {\n    e.preventDefault();\n    const li = e.target.closest('li');\n    li.insertBefore(li, li.previous());\n    li.querySelector('.' + CSS.ANSWER).focus();\n  };\n\n  /**\n   * Reset and hide form.\n   *\n   * @method _cancel\n   * @param {Event} e Event from button click\n   * @private\n   */\n  const _cancel = function(e) {\n    e.preventDefault();\n    modal.hide();\n  };\n\n  /**\n   * Insert content into editor and reset and hide form.\n   *\n   * @method _setSubquestion\n   * @param {Event} e Event from button click\n   * @param {tinymce.Editor} editor\n   * @private\n   */\n  const _setSubquestion = function(e, editor) {\n    e.preventDefault();\n    _getFormData();\n\n    _answerdata.forEach(function(option) {\n      option.answer = strencode(option.answer);\n      option.feedback = strencode(option.feedback);\n    });\n\n    const question = Mustache.render(TEMPLATE.OUTPUT,\n        {CSS: CSS,\n          answerdata: _answerdata,\n          qtype: _qtype,\n          marks: _marks\n        });\n\n    modal.hide();\n    editor.focus();\n    editor.setSelection(_currentSelection);\n\n    // Save the selection before inserting the new question.\n    let selection = window.rangy.saveSelection();\n    editor.insertContent(question);\n    //host.insertContentAtFocusPoint(question);\n\n    // Select the inserted text.\n    window.rangy.restoreSelection(selection);\n  };\n\n  /**\n   * Read and process the current data in the form.\n   *\n   * @method _setSubquestion\n   * @chainable\n   * @return {Object} self\n   * @private\n   */\n  const _getFormData = function() {\n    _answerdata = [];\n    let answer;\n    const answers = _form.querySelectorAll('.' + CSS.ANSWER);\n    const feedbacks = _form.querySelectorAll('.' + CSS.FEEDBACK);\n    const fractions = _form.querySelectorAll('.' + CSS.FRACTION);\n    const tolerances = _form.querySelectorAll('.' + CSS.TOLERANCE);\n    for (let i = 0; i < answers.size(); i++) {\n      answer = answers.item(i).getDOMNode().value;\n      if (this._qtype === 'NM' || this._qtype === 'NUMERICAL') {\n        answer = Number(answer);\n      }\n      _answerdata.push({answer: answer,\n        id: crypto.randomUUID(),\n        feedback: feedbacks.item(i).getDOMNode().value,\n        fraction: fractions.item(i).getDOMNode().value,\n        tolerance: tolerances.item(i) ? tolerances.item(i).getDOMNode().value : 0}\n      );\n      _marks = _form.querySelector('.' + CSS.MARKS).getDOMNode().value;\n    }\n  };\n\n  /**\n   * Check whether cursor is in a subquestion and return subquestion text if\n   * true.\n   *\n   * @method resolveSubquestion\n   * @return {Mixed} The selected innerHTML of the selected node with the subquestion if found, false otherwise.\n   */\n  const resolveSubquestion = function() {\n    let span = false;\n    editor.dom.getParents(editor.selection.getStart(), elm => {\n      // Are we in a span that encapsulates the cloze question?\n      if (!isNull(elm.classList)) {\n        // If we are on an opening/closing lang tag, we need to search for the corresponding opening/closing tag.\n        if (elm.classList.contains(markerClass)) {\n          span = elm.innerHTML;\n        }\n      }\n    });\n    return span;\n  };\n\nexport {\n  displayDialogue,\n  resolveSubquestion,\n  onInit,\n  onProcess,\n  onBlur\n};\n"],"names":["isNull","a","strdecode","t","String","replace","strencode","markerClass","reQtype","CSS","ANSWER","ANSWERS","ADD","CANCEL","DELETE","FEEDBACK","FRACTION","LEFT","LOWER","RIGHT","MARKS","DUPLICATE","RAISE","SUBMIT","SUMMARY","TOLERANCE","TYPE","TEMPLATE","FORM","M","util","image_url","OUTPUT","FRACTIONS","fraction","editor","isBlurred","_form","_answerdata","_answerDefault","_qtype","_selectedText","_marks","modal","_currentSelection","ed","addMakers","async","selection","getContent","toString","ModalFactory","create","type","Modal","title","component","templateContext","elementid","id","removeOnClose","large","subquestion","resolveSubquestion","_parseSubquestion","setBody","_getDialogueContent","text","show","m","content","newContent","indexOf","match","pos","substring","length","level","b","setContent","event","save","span","dom","select","setOuterHTML","innerHTML","removeMarkers","e","qtype","contentText","Mustache","render","types","DOMParser","parseFromString","body","firstElementChild","addEventListener","_choiceHandler","querySelector","_cancel","outerHTML","answerdata","crypto","randomUUID","fractions","marks","numerical","_setSubquestion","target","classList","contains","_deleteAnswer","_addAnswer","_lowerAnswer","_raiseAnswer","_getAnswerDefault","preventDefault","get","currentTarget","hasClass","answer","feedback","tolerance","focus","question","parts","exec","answers","forEach","options","push","index","querySelectorAll","Math","floor","closest","getDOMNode","value","_getFormData","splice","item","min","size","li","insertBefore","next","previous","hide","option","setSelection","window","rangy","saveSelection","insertContent","restoreSelection","feedbacks","tolerances","i","this","Number","getParents","getStart","elm"],"mappings":"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"}