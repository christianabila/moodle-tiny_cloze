{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_cloze2 plugin.\n *\n * @module      tiny_cloze/commands\n * @copyright   2023 MoodleDACH\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    clozeeditButtonName,\n    examplemenuMenuItemName,\n    icon,\n} from './common';\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\nconst handleAction = (editor) => {\n    // TODO Handle the action.\n    window.console.log(editor);\n};\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        clozeButtonText,\n        buttonImage,\n    ] = await Promise.all([\n        getString('pluginname', component),\n        getButtonImage('icon', component),\n    ]);\n\n    return (editor) => {\n        // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        // Register the clozeedit Toolbar Button.\n        editor.ui.registry.addButton(clozeeditButtonName, {\n            icon,\n            tooltip: clozeButtonText,\n            onAction: () => handleAction(editor),\n        });\n\n        // Add the examplemenu Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(examplemenuMenuItemName, {\n            icon,\n            text: clozeButtonText,\n            onAction: () => handleAction(editor),\n        });\n    };\n};\n"],"names":["handleAction","editor","window","console","log","async","clozeButtonText","buttonImage","Promise","all","component","ui","registry","addIcon","icon","html","addButton","clozeeditButtonName","tooltip","onAction","addMenuItem","examplemenuMenuItemName","text"],"mappings":";;;;;;;;MAoCMA,aAAgBC,SAElBC,OAAOC,QAAQC,IAAIH,2BAWCI,gBAEhBC,gBACAC,mBACMC,QAAQC,IAAI,EAClB,mBAAU,aAAcC,oBACxB,yBAAe,OAAQA,4BAGnBT,SAEJA,OAAOU,GAAGC,SAASC,QAAQC,aAAMP,YAAYQ,MAG7Cd,OAAOU,GAAGC,SAASI,UAAUC,4BAAqB,CAC9CH,KAAAA,aACAI,QAASZ,gBACTa,SAAU,IAAMnB,aAAaC,UAKjCA,OAAOU,GAAGC,SAASQ,YAAYC,gCAAyB,CACpDP,KAAAA,aACAQ,KAAMhB,gBACNa,SAAU,IAAMnB,aAAaC"}